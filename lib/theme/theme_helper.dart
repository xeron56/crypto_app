import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:crypto_app/core/utils/pref_utils.dart';
import 'package:crypto_app/core/utils/size_utils.dart';
import 'package:get/get.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.blueGray900,
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray700,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodySmall: TextStyle(
          color: appTheme.teal50,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.teal50,
          fontSize: 40.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: appTheme.teal50,
          fontSize: 32.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.teal50,
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray500,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray200,
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.teal50,
          fontSize: 20.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.teal50,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.teal50,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF0065FF),
    primaryContainer: Color(0XFF171826),
    secondaryContainer: Color(0XFF7950F1),

    // Error colors
    errorContainer: Color(0XFF0C50FC),
    onError: Color(0X7CA45DFF),

    // On colors(text colors)
    onPrimary: Color(0XFF0C1024),
    onPrimaryContainer: Color(0XFFF7931A),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFCA63);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blueA700 => Color(0XFF0066FF);
  Color get blueA70001 => Color(0XFF246BFD);

  // BlueGray
  Color get blueGray200 => Color(0XFF9CB3BF);
  Color get blueGray500 => Color(0XFF62737F);
  Color get blueGray700 => Color(0XFF3E436D);
  Color get blueGray900 => Color(0XFF26283D);
  Color get blueGray90001 => Color(0XFF262E50);
  Color get blueGray90002 => Color(0XFF23292F);

  // Cyan
  Color get cyan300 => Color(0XFF46DDC1);
  Color get cyan30001 => Color(0XFF47DDC2);
  Color get cyan50 => Color(0XFFDAFEF8);
  Color get cyanA400 => Color(0XFF08E6F8);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFFF8F6E);

  // DeepPurple
  Color get deepPurple800 => Color(0XFF4E07AE);
  Color get deepPurpleA100 => Color(0XFFC071FF);

  // DeepPurpleAf
  Color get deepPurpleA1004f => Color(0X4F9E86FD);

  // Gray
  Color get gray10000 => Color(0X00F3F3F3);
  Color get gray40026 => Color(0X26B7B6BB);
  Color get gray900 => Color(0XFF151D24);
  Color get gray90001 => Color(0XFF181A1F);

  // Green
  Color get green800 => Color(0XFF328332);
  Color get greenA100 => Color(0XFFC1FFC7);
  Color get greenA200 => Color(0XFF81FFC0);

  // Indigo
  Color get indigo100 => Color(0XFFC1C7FF);
  Color get indigoA10000 => Color(0X00907BFD);
  Color get indigoA200 => Color(0XFF627EEA);

  // LightBlue
  Color get lightBlue30038 => Color(0X3856D4FA);

  // LightBlueAb
  Color get lightBlueA1006b => Color(0X6B7BE0FF);

  // LightGreen
  Color get lightGreenA700 => Color(0XFF75E92D);

  // Orangef
  Color get orange3003f => Color(0X3FFFB866);

  // Orange
  Color get orangeA200 => Color(0XFFECB244);

  // Pink
  Color get pink300 => Color(0XFFFF6393);
  Color get pinkA100 => Color(0XFFFF7898);
  Color get pinkA10001 => Color(0XFFF572A3);

  // Purple
  Color get purple50 => Color(0XFFFAC4FF);

  // Teal
  Color get teal200 => Color(0XFF90F1C5);
  Color get teal50 => Color(0XFFE5F0F4);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // WhiteAf
  Color get whiteA7004f => Color(0X4FFDFDFD);

  // Yellow
  Color get yellow100 => Color(0XFFFFFBCE);
  Color get yellow800 => Color(0XFFF79E1B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
